var documenterSearchIndex = {"docs":
[{"location":"#Determinantal.jl:-a-Julia-package-for-sampling-Determinantal-Point-Processes","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Determinantal.jl provides some types and functions for sampling from DPPs (and related mod els).","category":"page"},{"location":"#Brief-background","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Brief background","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"A Determinantal Point Process is a random subset X of a \"ground set\" Omega. Here we think of Omega as a set of items or points, and X is a random subset selected in a way that preserves some of the \"diversity\" in Omega.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The traditional definition of a DPP you will see in most of the literature is based on inclusion probabilities. We say X is a DPP if for all fixed subsets  S subseteq Omega there exists a matrix bK (called the marginal kernel) such that:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"p(S subseteq X) = det bK_S","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"where bK_S is the sub-matrix of bK indexed by S. For instance, if S=i, a single item, then this says that","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"p(i in X) = K_ii","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"so the inclusion probabilities for single items can be read out of the diagonal of bK. If S = ij, then we have","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"p(S subseteq X) = K_ii K_jj - K_ij^2","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Because K_ij^2 is non-negative, this means that the probability of getting both i and j is less than the product of the invididual probabilities. This tells us that a DPP is in general repulsive (compared to a Poisson process).","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Here is an example of defining a very simple DPP in Determinantal.jl, over a set of size 2, using the matrix","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"bK = beginpmatrix\n34  14 \n14  34\nendpmatrix","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"using Determinantal\n#A 2x2 matrix, so here Ω={1,2}\nK = [3 1; 1 3]/4\ndpp = MarginalDPP(K)\nsample(dpp) #𝒳, a random subset\n#estimate prob. that item 1 is in 𝒳\nsum([1 ∈ sample(dpp) for _ in 1:1000])/1000\n#should be approx. equal to K[1,1]","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The name \"MarginalDPP\" refers to the fact that the DPP is defined based on its marginal kernel. There is one important constraint when defining DPPs based on the marginal kernel bK; the eigenvalues of bK need to be in 01. Because of this, and for reasons of interpretability, it is often more convenient to work with L-ensembles or extended L-ensembles.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"L-ensembles are a (large) subset of DPPs with the following property. We say X is a L-ensemble if there exists bL such that:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"p(X=X) propto det bL_X","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"This equation relates the likelihood (probability mass function) of the DPP to the determinant of a submatrix. Subsets s.t. bL_X is large have a high probability of being selected. It is quite natural to define a L-ensemble based on kernel matrix that measures similarity (i.e. where L_ij measures the similarity of points i and j). Submatrices of bL with points that are unlike one another (diverse) will be closer to the identity matrix and therefore have a higher determinant. The next example shows a more realistic use of Determinantal.jl","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"using LinearAlgebra\nx = randn(2,500) #some points in dim 2\n\n#compute a kernel matrix for the points in x\nL = [ exp(-norm(a-b)^2) for a in eachcol(x), b in eachcol(x) ]\ndpp = EllEnsemble(L) #form an L-ensemble based on the 𝐋 matrix\nrescale!(dpp,50) #scale so that the expected size is 50\nind = sample(dpp) #a sample from the DPP (indices)\n\nusing Plots\n\ngr() #hide\nscatter(x[1,:],x[2,:],marker_z = map((v) -> v ∈ ind, 1:size(x,2)),legend=:none,alpha=.75) #hide","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The line rescale!(dpp,50) sets the expected size of the L-ensemble to 50. One could also decide to use a fixed-size DPP, and call instead sample(dpp,50), which always returns a subset of size 50. For more on DPPs, L-ensembles, etc. see  Nicolas Tremblay, Simon Barthelm{\\'e}, Konstantin Usevich, Pierre-Olivier Amblard (2021).","category":"page"},{"location":"#Using-other-kernels","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Using other kernels","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"EllEnsemble requires a SPD matrix as input. For more exotic kernels than the Gaussian, you can either do things by hand or use KernelFunctions.jl, which Determinantal.jl supports.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"using KernelFunctions\nx = randn(2,100)\nL = EllEnsemble(ColVecs(x),ExponentialKernel())","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Here we need to specify whether the 2times 100 matrix  'x' should be considered to represent 100 points in dimension 2, or 2 points in dimension 100. ColVecs specifies the former, RowVecs the latter. This mechanism is borrowed from KernelFunctions and used in other places as well.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"See the documentation of KernelFunctions.jl for a list of available kernels.","category":"page"},{"location":"#Using-low-rank-matrices-for-speed","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Using low-rank matrices for speed","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"L-ensembles defined using a full-rank matrix are expensive in large n, because they require an eigendecomposition of the bL matrix (at cost O(n^3)). For practical applications in large n it is preferable to use a low-rank ensemble, i.e. one such that bL = bM bM^t with bM a n times m matrix with m ll n.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Determinantal.jl provides a type called \"LowRank\" that represents a symmetric low-rank matrix efficiently:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Z = randn(5,2)\nK = Z*Z' #a rank 2 matrix of size 5x5\nK_lr = LowRank(Z)\nall(K .≈ K_lr)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"It provides a specialised implementation of eigen that only returns the non-null eigenvalues. Here is an example:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"eigen(K_lr).values","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Because K has rank 2, there are only two eigenvalues.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The constructor for EllEnsemble accepts matrices of LowRank type as arguments:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"EllEnsemble(K_lr)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The advantage of using LowRank is that the cost of forming the L-ensemble drops from O(n^3) to O(nm^2), where m is the rank. Note that the maximum size of the DPP cannot exceed m in this case.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The rff functions computes a low-rank approximation to a Gaussian kernel matrix using Random Fourier Features, Ali Rahimi, Benjamin Recht (2007)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = randn(2,1000) #some points in dim 2\nL_rff = rff(ColVecs(x),150,.5) #second argument determines rank, third is standard deviation of Gaussian kernel\nL_exact = gaussker(ColVecs(x),.5)\nlr=EllEnsemble(L_rff)\nlex = EllEnsemble(L_exact)\nplot(sort(lex.λ,rev=true)); plot!(sort(lr.λ,rev=true),legend=:none) # hide","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The plot shows the approximation of the spectrum of the kernel matrix by the low-rank approximation.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Using low-rank representations Determinantal.jl can scale up to millions of points. Keep in mind that DPPs have good scaling in the size of Omega (n) but poor scaling in the rank (m, number of columns of bM). The overall cost scales as O(nm^2), so m should be kept in the hundreds at most.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"As an alternative to Random Fourier Features, we also provide an implementation of the Nyström approximation Christopher Williams, Matthias Seeger (2001). The function again returns a matrix bM such that bL approx bM bM^t, but the approximation is formed using a subset of points.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = randn(3,1000)\nM_n =  nystrom_approx(ColVecs(x),SqExponentialKernel(),50) #use 50 points\nL = EllEnsemble(ColVecs(x),SqExponentialKernel())\nL_n = EllEnsemble(M_n)\n\nplot(sort(L.λ,rev=:true)) # hide\nplot!(sort(L_n.λ,rev=:true),legend=:false) # hide","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Not all subsets give good Nyström approximations. You can indicate a specific subset to use:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"nystrom_approx(ColVecs(x),SqExponentialKernel(),1:50); #use first 50 points\nnothing; # hide","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Instead of using low-rank approximations to kernel matrices, you can also design your own features","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = randn(3,1000)\n#some non-linear features we've just made up\nfeat = (xi,xj,a) -> @. exp(-a*xi*xj)*cos(xi+xj)\nftrs = [ feat(vec(x[i,:]),vec(x[j,:]),a) for i in 1:3, j in 1:3, a in [0,1,2] if i >= j ]\nM = reduce(hcat,ftrs)\nll = EllEnsemble(LowRank(M))\nrescale!(ll,14)\nsample(ll)\nnothing; # hide","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"A sensible set of features to use are multivariate polynomial features, here used to set up a ProjectionEnsemble (a special case of a low-rank DPP that has fixed sample size, equal to rank of bM)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = randn(2,1000)\nLp = polyfeatures(ColVecs(x),10) |> ProjectionEnsemble\nind = sample(Lp)\nPlots.scatter(x[1,:],x[2,:],color=:gray,alpha=.5,legend=:none) # hide\nPlots.scatter!(x[1,ind],x[2,ind],color=:red,alpha=1) # hide","category":"page"},{"location":"#Inclusion-probabilities","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Inclusion probabilities","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"An attractive aspect of DPPs is that inclusion probabilities are easy to compute. An inclusion probability is the probability that a certain item (or items) is included in the random set produced by a DPP.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"using StatsBase,Statistics\n#sample 1,000 times and compute empirical inclusion frequencies\nreps = [StatsBase.counts(sample(Lp),1:Lp.n) for _ in 1:1000];\n#compare to theoretical values\nscatter(inclusion_prob(Lp),mean(reps),legend=:none)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"So far these are just first-order inclusion probabilities. More generally, you can obtain higher-order probabilities (ie prob that items i,j,k,... are in the set jointly) from the marginal kernel of the DPP, given by \"marginal_kernel\"","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"In the next example we compute the empirical inclusion probability of a set of items:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"using Statistics\nx = randn(2,10)\nL = Determinantal.gaussker(ColVecs(x),.5) |> EllEnsemble\nrescale!(L,4)\nset = [3,5]\n\nincl = [ length(intersect(set,sample(L)))==length(set) for _ in 1:10000];\n#empirical inclusion prob.\nemp = mean(incl)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"The theoretical value is given by","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"th = det(marginal_kernel(L)[set,set])","category":"page"},{"location":"#Other-sampling-methods","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Other sampling methods","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Determinantal.jl offers other sampling methods that are based on inter-point distances.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"In these algorithms, the initial point is selected uniformly. At all subsequent steps, the next point is selected based on its distance to the current set X(t), meaning d_t(xX(t)) = min   d(xx_i)  x_i in X(t) . The sampling probability depends on the method. In farthest-point sampling, which is deterministic, at each step, the point selected is one that is farthest from all currently selected points. In D²-sampling Sergei Vassilvitskii, David Arthur (2006), which is a relaxed stochastic version of farthest-point sampling,  points are selected with prob. proportional to squared distance to the current set.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = rand(2,1000);\nind = distance_sampling(ColVecs(x),40,:farthest)\nscatter(x[1,ind],x[2,ind],title=\"Farthest-point sample\",legend=:none)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"ind = distance_sampling(ColVecs(x),40,:d2)\nscatter(x[1,ind],x[2,ind],title=\"D² sample\",legend=:none)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"You can obtain other methods by changing how the prob. of selection depends on the distance. For instance, selecting points uniformly as long as they are more than distance r away from the other points gives a so-called \"hard-sphere\" sample.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"ind = distance_sampling(ColVecs(x),40,(v)-> v > .1) #may get fewer than 40 points\nscatter(x[1,ind],x[2,ind],title=\"Hard-sphere sample\",legend=:none)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Distance-based sampling is quite general, all it needs is a (pseudo-)distance matrix.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"D = [sum(abs.(a-b)) for a in eachcol(x), b in eachcol(x)] #L1 distance\nind = distance_sampling(D,40,(v)-> v > .1) #may get fewer than 40 points\nscatter(x[1,ind],x[2,ind],title=\"Hard-sphere sample in L1 dist\",legend=:none)","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"For datasets that are large, it may not be wise (or even possible) to pre-compute and hold a full distance matrix in memory. You can use the LazyDist type, which behaves like a standard matrix, but whose entries are computed on-the-fly and not stored:","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"D = LazyDist(ColVecs(x),(a,b) -> sum(abs.(a-b)))\nD[3,1] #not pre-computed!\nind = distance_sampling(D,40,(v)-> v >.5);","category":"page"},{"location":"#Extended-L-ensembles","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Extended L-ensembles","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Extended L-ensembles are representations of DPPs that extend L-ensembles, introduced in Nicolas Tremblay, Simon Barthelm{\\'e}, Konstantin Usevich, Pierre-Olivier Amblard (2021). They are defined by a pair of matrices bL and bV, such that","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"p(X=X) propto det beginpmatrix\nbL_X   bV_X \n bV_X^t  mathbf0\nendpmatrix","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"bV","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"should be thought of as defining \"mandatory\" features of the DPP, while bL can be interpreted more or less as a regular kernel, see  Nicolas Tremblay, Simon Barthelm{\\'e}, Konstantin Usevich, Pierre-Olivier Amblard (2021).","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Determinantal.jl provides some basic support for defining extended L-ensembles. The following is the \"default\" DPP described in  Nicolas Tremblay, Simon Barthelm{\\'e}, Konstantin Usevich, Pierre-Olivier Amblard (2021), at order 3.","category":"page"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"x = randn(2,1000)\nL = [norm(a-b).^3 for a in eachcol(x), b in eachcol(x)]\nV = polyfeatures(ColVecs(x),1)\nele = ExtEnsemble(L,V)\nrescale!(ele,50)\nind = sample(ele)\nPlots.scatter(x[1,:],x[2,:],color=:gray,alpha=.5) # hide\nPlots.scatter!(x[1,ind],x[2,ind],color=:red,alpha=1,legend=:none) # hide","category":"page"},{"location":"#Functions-and-types","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Functions and types","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"Modules = [DPP]\nOrder   = [:function, :type]","category":"page"},{"location":"#References","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"References","text":"","category":"section"},{"location":"","page":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","title":"Determinantal.jl: a Julia package for sampling Determinantal Point Processes","text":"","category":"page"}]
}
